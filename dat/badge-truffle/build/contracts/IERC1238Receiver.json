{
  "contractName": "IERC1238Receiver",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "minter",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "onERC1238Mint",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "minter",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "onERC1238BatchMint",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "metadata": "{\"compiler\":{\"version\":\"0.8.13+commit.abaa5c0e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"minter\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"onERC1238BatchMint\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"minter\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"onERC1238Mint\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"onERC1238BatchMint(address,uint256[],uint256[],bytes)\":{\"details\":\"Handles the receipt of multiple ERC1238 token types. NOTE: To accept the transfer(s), this must return `bytes4(keccak256(\\\"onERC1238BatchMint(address,address,uint256[],uint256[],bytes)\\\"))`\",\"params\":{\"amounts\":\"An array containing amounts of each token being transferred (order and length must match ids array)\",\"data\":\"Additional data with no specified format\",\"ids\":\"An array containing ids of each token being transferred (order and length must match values array)\",\"minter\":\"The address which initiated minting (i.e. msg.sender)\"},\"returns\":{\"_0\":\"`bytes4(keccak256(\\\"onERC1238BatchMint(address,uint256[],uint256[],bytes)\\\"))` if minting is allowed\"}},\"onERC1238Mint(address,uint256,uint256,bytes)\":{\"details\":\"Handles the receipt of a single ERC1238 token type. NOTE: To accept the transfer, this must return `bytes4(keccak256(\\\"onERC1238Mint(address,address,uint256,uint256,bytes)\\\"))`\",\"params\":{\"amount\":\"The amount of tokens being transferred\",\"data\":\"Additional data with no specified format\",\"id\":\"The ID of the token being transferred\",\"minter\":\"The address which initiated minting (i.e. msg.sender)\"},\"returns\":{\"_0\":\"`bytes4(keccak256(\\\"onERC1238Mint(address,uint256,uint256,bytes)\\\"))` if minting is allowed\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"project:/contracts/ERC1238/IERC1238Receiver.sol\":\"IERC1238Receiver\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"project:/contracts/ERC1238/IERC1238Receiver.sol\":{\"keccak256\":\"0x27f5768962b7573127deecf3ff533b6ee1831d25072e65c28680f3e288a4c8a4\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://1dd72e817208ac8f069c7b7dd04e3d10c79230acf079c1ae5e69fce70815f2c8\",\"dweb:/ipfs/QmPNrGpAGKFYeb9WRgoN87Gnthp2A5CSfQ5Y5xaNmBBTZT\"]}},\"version\":1}",
  "bytecode": "0x",
  "deployedBytecode": "0x",
  "immutableReferences": {},
  "generatedSources": [],
  "deployedGeneratedSources": [],
  "sourceMap": "",
  "deployedSourceMap": "",
  "source": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n *\n */\ninterface IERC1238Receiver {\n    /**\n     * @dev Handles the receipt of a single ERC1238 token type.\n     *\n     * NOTE: To accept the transfer, this must return\n     * `bytes4(keccak256(\"onERC1238Mint(address,address,uint256,uint256,bytes)\"))`\n     *\n     * @param minter The address which initiated minting (i.e. msg.sender)\n     * @param id The ID of the token being transferred\n     * @param amount The amount of tokens being transferred\n     * @param data Additional data with no specified format\n     * @return `bytes4(keccak256(\"onERC1238Mint(address,uint256,uint256,bytes)\"))` if minting is allowed\n     */\n    function onERC1238Mint(\n        address minter,\n        uint256 id,\n        uint256 amount,\n        bytes calldata data\n    ) external returns (bytes4);\n\n    /**\n     * @dev Handles the receipt of multiple ERC1238 token types.\n     *\n     * NOTE: To accept the transfer(s), this must return\n     * `bytes4(keccak256(\"onERC1238BatchMint(address,address,uint256[],uint256[],bytes)\"))`\n     *\n     * @param minter The address which initiated minting (i.e. msg.sender)\n     * @param ids An array containing ids of each token being transferred (order and length must match values array)\n     * @param amounts An array containing amounts of each token being transferred (order and length must match ids array)\n     * @param data Additional data with no specified format\n     * @return `bytes4(keccak256(\"onERC1238BatchMint(address,uint256[],uint256[],bytes)\"))` if minting is allowed\n     */\n    function onERC1238BatchMint(\n        address minter,\n        uint256[] calldata ids,\n        uint256[] calldata amounts,\n        bytes calldata data\n    ) external returns (bytes4);\n}\n",
  "sourcePath": "/home/cowboy/MyWork/ONERep/src/badge-truffle/contracts/ERC1238/IERC1238Receiver.sol",
  "ast": {
    "absolutePath": "project:/contracts/ERC1238/IERC1238Receiver.sol",
    "exportedSymbols": {
      "IERC1238Receiver": [
        1705
      ]
    },
    "id": 1706,
    "license": "MIT",
    "nodeType": "SourceUnit",
    "nodes": [
      {
        "id": 1674,
        "literals": [
          "solidity",
          "^",
          "0.8",
          ".0"
        ],
        "nodeType": "PragmaDirective",
        "src": "33:23:4"
      },
      {
        "abstract": false,
        "baseContracts": [],
        "canonicalName": "IERC1238Receiver",
        "contractDependencies": [],
        "contractKind": "interface",
        "fullyImplemented": false,
        "id": 1705,
        "linearizedBaseContracts": [
          1705
        ],
        "name": "IERC1238Receiver",
        "nameLocation": "79:16:4",
        "nodeType": "ContractDefinition",
        "nodes": [
          {
            "documentation": {
              "id": 1675,
              "nodeType": "StructuredDocumentation",
              "src": "102:581:4",
              "text": " @dev Handles the receipt of a single ERC1238 token type.\n NOTE: To accept the transfer, this must return\n `bytes4(keccak256(\"onERC1238Mint(address,address,uint256,uint256,bytes)\"))`\n @param minter The address which initiated minting (i.e. msg.sender)\n @param id The ID of the token being transferred\n @param amount The amount of tokens being transferred\n @param data Additional data with no specified format\n @return `bytes4(keccak256(\"onERC1238Mint(address,uint256,uint256,bytes)\"))` if minting is allowed"
            },
            "functionSelector": "45ed75d5",
            "id": 1688,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "onERC1238Mint",
            "nameLocation": "697:13:4",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 1684,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 1677,
                  "mutability": "mutable",
                  "name": "minter",
                  "nameLocation": "728:6:4",
                  "nodeType": "VariableDeclaration",
                  "scope": 1688,
                  "src": "720:14:4",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 1676,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "720:7:4",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 1679,
                  "mutability": "mutable",
                  "name": "id",
                  "nameLocation": "752:2:4",
                  "nodeType": "VariableDeclaration",
                  "scope": 1688,
                  "src": "744:10:4",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 1678,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "744:7:4",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 1681,
                  "mutability": "mutable",
                  "name": "amount",
                  "nameLocation": "772:6:4",
                  "nodeType": "VariableDeclaration",
                  "scope": 1688,
                  "src": "764:14:4",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 1680,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "764:7:4",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 1683,
                  "mutability": "mutable",
                  "name": "data",
                  "nameLocation": "803:4:4",
                  "nodeType": "VariableDeclaration",
                  "scope": 1688,
                  "src": "788:19:4",
                  "stateVariable": false,
                  "storageLocation": "calldata",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes_calldata_ptr",
                    "typeString": "bytes"
                  },
                  "typeName": {
                    "id": 1682,
                    "name": "bytes",
                    "nodeType": "ElementaryTypeName",
                    "src": "788:5:4",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes_storage_ptr",
                      "typeString": "bytes"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "710:103:4"
            },
            "returnParameters": {
              "id": 1687,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 1686,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 1688,
                  "src": "832:6:4",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes4",
                    "typeString": "bytes4"
                  },
                  "typeName": {
                    "id": 1685,
                    "name": "bytes4",
                    "nodeType": "ElementaryTypeName",
                    "src": "832:6:4",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes4",
                      "typeString": "bytes4"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "831:8:4"
            },
            "scope": 1705,
            "src": "688:152:4",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "documentation": {
              "id": 1689,
              "nodeType": "StructuredDocumentation",
              "src": "846:727:4",
              "text": " @dev Handles the receipt of multiple ERC1238 token types.\n NOTE: To accept the transfer(s), this must return\n `bytes4(keccak256(\"onERC1238BatchMint(address,address,uint256[],uint256[],bytes)\"))`\n @param minter The address which initiated minting (i.e. msg.sender)\n @param ids An array containing ids of each token being transferred (order and length must match values array)\n @param amounts An array containing amounts of each token being transferred (order and length must match ids array)\n @param data Additional data with no specified format\n @return `bytes4(keccak256(\"onERC1238BatchMint(address,uint256[],uint256[],bytes)\"))` if minting is allowed"
            },
            "functionSelector": "c0bfec68",
            "id": 1704,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "onERC1238BatchMint",
            "nameLocation": "1587:18:4",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 1700,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 1691,
                  "mutability": "mutable",
                  "name": "minter",
                  "nameLocation": "1623:6:4",
                  "nodeType": "VariableDeclaration",
                  "scope": 1704,
                  "src": "1615:14:4",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 1690,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "1615:7:4",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 1694,
                  "mutability": "mutable",
                  "name": "ids",
                  "nameLocation": "1658:3:4",
                  "nodeType": "VariableDeclaration",
                  "scope": 1704,
                  "src": "1639:22:4",
                  "stateVariable": false,
                  "storageLocation": "calldata",
                  "typeDescriptions": {
                    "typeIdentifier": "t_array$_t_uint256_$dyn_calldata_ptr",
                    "typeString": "uint256[]"
                  },
                  "typeName": {
                    "baseType": {
                      "id": 1692,
                      "name": "uint256",
                      "nodeType": "ElementaryTypeName",
                      "src": "1639:7:4",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "id": 1693,
                    "nodeType": "ArrayTypeName",
                    "src": "1639:9:4",
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_uint256_$dyn_storage_ptr",
                      "typeString": "uint256[]"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 1697,
                  "mutability": "mutable",
                  "name": "amounts",
                  "nameLocation": "1690:7:4",
                  "nodeType": "VariableDeclaration",
                  "scope": 1704,
                  "src": "1671:26:4",
                  "stateVariable": false,
                  "storageLocation": "calldata",
                  "typeDescriptions": {
                    "typeIdentifier": "t_array$_t_uint256_$dyn_calldata_ptr",
                    "typeString": "uint256[]"
                  },
                  "typeName": {
                    "baseType": {
                      "id": 1695,
                      "name": "uint256",
                      "nodeType": "ElementaryTypeName",
                      "src": "1671:7:4",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "id": 1696,
                    "nodeType": "ArrayTypeName",
                    "src": "1671:9:4",
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_uint256_$dyn_storage_ptr",
                      "typeString": "uint256[]"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 1699,
                  "mutability": "mutable",
                  "name": "data",
                  "nameLocation": "1722:4:4",
                  "nodeType": "VariableDeclaration",
                  "scope": 1704,
                  "src": "1707:19:4",
                  "stateVariable": false,
                  "storageLocation": "calldata",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes_calldata_ptr",
                    "typeString": "bytes"
                  },
                  "typeName": {
                    "id": 1698,
                    "name": "bytes",
                    "nodeType": "ElementaryTypeName",
                    "src": "1707:5:4",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes_storage_ptr",
                      "typeString": "bytes"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "1605:127:4"
            },
            "returnParameters": {
              "id": 1703,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 1702,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 1704,
                  "src": "1751:6:4",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes4",
                    "typeString": "bytes4"
                  },
                  "typeName": {
                    "id": 1701,
                    "name": "bytes4",
                    "nodeType": "ElementaryTypeName",
                    "src": "1751:6:4",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes4",
                      "typeString": "bytes4"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "1750:8:4"
            },
            "scope": 1705,
            "src": "1578:181:4",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          }
        ],
        "scope": 1706,
        "src": "69:1692:4",
        "usedErrors": []
      }
    ],
    "src": "33:1729:4"
  },
  "compiler": {
    "name": "solc",
    "version": "0.8.13+commit.abaa5c0e.Emscripten.clang"
  },
  "networks": {},
  "schemaVersion": "3.4.7",
  "updatedAt": "2022-05-23T03:18:23.776Z",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "onERC1238BatchMint(address,uint256[],uint256[],bytes)": {
        "details": "Handles the receipt of multiple ERC1238 token types. NOTE: To accept the transfer(s), this must return `bytes4(keccak256(\"onERC1238BatchMint(address,address,uint256[],uint256[],bytes)\"))`",
        "params": {
          "amounts": "An array containing amounts of each token being transferred (order and length must match ids array)",
          "data": "Additional data with no specified format",
          "ids": "An array containing ids of each token being transferred (order and length must match values array)",
          "minter": "The address which initiated minting (i.e. msg.sender)"
        },
        "returns": {
          "_0": "`bytes4(keccak256(\"onERC1238BatchMint(address,uint256[],uint256[],bytes)\"))` if minting is allowed"
        }
      },
      "onERC1238Mint(address,uint256,uint256,bytes)": {
        "details": "Handles the receipt of a single ERC1238 token type. NOTE: To accept the transfer, this must return `bytes4(keccak256(\"onERC1238Mint(address,address,uint256,uint256,bytes)\"))`",
        "params": {
          "amount": "The amount of tokens being transferred",
          "data": "Additional data with no specified format",
          "id": "The ID of the token being transferred",
          "minter": "The address which initiated minting (i.e. msg.sender)"
        },
        "returns": {
          "_0": "`bytes4(keccak256(\"onERC1238Mint(address,uint256,uint256,bytes)\"))` if minting is allowed"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  }
}